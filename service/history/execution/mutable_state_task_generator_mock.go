// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: mutable_state_task_generator.go

// Package execution is a generated GoMock package.
package execution

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	persistence "github.com/uber/cadence/common/persistence"
	types "github.com/uber/cadence/common/types"
)

// MockMutableStateTaskGenerator is a mock of MutableStateTaskGenerator interface
type MockMutableStateTaskGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockMutableStateTaskGeneratorMockRecorder
}

// MockMutableStateTaskGeneratorMockRecorder is the mock recorder for MockMutableStateTaskGenerator
type MockMutableStateTaskGeneratorMockRecorder struct {
	mock *MockMutableStateTaskGenerator
}

// NewMockMutableStateTaskGenerator creates a new mock instance
func NewMockMutableStateTaskGenerator(ctrl *gomock.Controller) *MockMutableStateTaskGenerator {
	mock := &MockMutableStateTaskGenerator{ctrl: ctrl}
	mock.recorder = &MockMutableStateTaskGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMutableStateTaskGenerator) EXPECT() *MockMutableStateTaskGeneratorMockRecorder {
	return m.recorder
}

// GenerateWorkflowStartTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateWorkflowStartTasks(startTime time.Time, startEvent *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowStartTasks", startTime, startEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateWorkflowStartTasks indicates an expected call of GenerateWorkflowStartTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateWorkflowStartTasks(startTime, startEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowStartTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateWorkflowStartTasks), startTime, startEvent)
}

// GenerateWorkflowCloseTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateWorkflowCloseTasks(closeEvent *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowCloseTasks", closeEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateWorkflowCloseTasks indicates an expected call of GenerateWorkflowCloseTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateWorkflowCloseTasks(closeEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowCloseTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateWorkflowCloseTasks), closeEvent)
}

// GenerateRecordWorkflowStartedTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateRecordWorkflowStartedTasks(startEvent *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRecordWorkflowStartedTasks", startEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateRecordWorkflowStartedTasks indicates an expected call of GenerateRecordWorkflowStartedTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateRecordWorkflowStartedTasks(startEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRecordWorkflowStartedTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateRecordWorkflowStartedTasks), startEvent)
}

// GenerateDelayedDecisionTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateDelayedDecisionTasks(startEvent *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDelayedDecisionTasks", startEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateDelayedDecisionTasks indicates an expected call of GenerateDelayedDecisionTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateDelayedDecisionTasks(startEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDelayedDecisionTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateDelayedDecisionTasks), startEvent)
}

// GenerateDecisionScheduleTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateDecisionScheduleTasks(decisionScheduleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDecisionScheduleTasks", decisionScheduleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateDecisionScheduleTasks indicates an expected call of GenerateDecisionScheduleTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateDecisionScheduleTasks(decisionScheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDecisionScheduleTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateDecisionScheduleTasks), decisionScheduleID)
}

// GenerateDecisionStartTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateDecisionStartTasks(decisionScheduleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDecisionStartTasks", decisionScheduleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateDecisionStartTasks indicates an expected call of GenerateDecisionStartTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateDecisionStartTasks(decisionScheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDecisionStartTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateDecisionStartTasks), decisionScheduleID)
}

// GenerateActivityTransferTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateActivityTransferTasks(event *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateActivityTransferTasks", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateActivityTransferTasks indicates an expected call of GenerateActivityTransferTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateActivityTransferTasks(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateActivityTransferTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateActivityTransferTasks), event)
}

// GenerateActivityRetryTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateActivityRetryTasks(activityScheduleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateActivityRetryTasks", activityScheduleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateActivityRetryTasks indicates an expected call of GenerateActivityRetryTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateActivityRetryTasks(activityScheduleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateActivityRetryTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateActivityRetryTasks), activityScheduleID)
}

// GenerateChildWorkflowTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateChildWorkflowTasks(event *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChildWorkflowTasks", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateChildWorkflowTasks indicates an expected call of GenerateChildWorkflowTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateChildWorkflowTasks(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChildWorkflowTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateChildWorkflowTasks), event)
}

// GenerateRequestCancelExternalTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateRequestCancelExternalTasks(event *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRequestCancelExternalTasks", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateRequestCancelExternalTasks indicates an expected call of GenerateRequestCancelExternalTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateRequestCancelExternalTasks(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRequestCancelExternalTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateRequestCancelExternalTasks), event)
}

// GenerateSignalExternalTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateSignalExternalTasks(event *types.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSignalExternalTasks", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateSignalExternalTasks indicates an expected call of GenerateSignalExternalTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateSignalExternalTasks(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSignalExternalTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateSignalExternalTasks), event)
}

// GenerateWorkflowSearchAttrTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateWorkflowSearchAttrTasks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowSearchAttrTasks")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateWorkflowSearchAttrTasks indicates an expected call of GenerateWorkflowSearchAttrTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateWorkflowSearchAttrTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowSearchAttrTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateWorkflowSearchAttrTasks))
}

// GenerateWorkflowResetTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateWorkflowResetTasks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowResetTasks")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateWorkflowResetTasks indicates an expected call of GenerateWorkflowResetTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateWorkflowResetTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowResetTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateWorkflowResetTasks))
}

// GenerateFromTransferTask mocks base method
func (m *MockMutableStateTaskGenerator) GenerateFromTransferTask(transferTask *persistence.TransferTaskInfo, targetCluster string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromTransferTask", transferTask, targetCluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateFromTransferTask indicates an expected call of GenerateFromTransferTask
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateFromTransferTask(transferTask, targetCluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromTransferTask", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateFromTransferTask), transferTask, targetCluster)
}

// GenerateCrossClusterRecordChildCompletedTask mocks base method
func (m *MockMutableStateTaskGenerator) GenerateCrossClusterRecordChildCompletedTask(transferTask *persistence.TransferTaskInfo, targetCluster string, parentInfo *types.ParentExecutionInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCrossClusterRecordChildCompletedTask", transferTask, targetCluster, parentInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateCrossClusterRecordChildCompletedTask indicates an expected call of GenerateCrossClusterRecordChildCompletedTask
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateCrossClusterRecordChildCompletedTask(transferTask, targetCluster, parentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCrossClusterRecordChildCompletedTask", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateCrossClusterRecordChildCompletedTask), transferTask, targetCluster, parentInfo)
}

// GenerateCrossClusterApplyParentClosePolicyTask mocks base method
func (m *MockMutableStateTaskGenerator) GenerateCrossClusterApplyParentClosePolicyTask(transferTask *persistence.TransferTaskInfo, targetCluster string, childDomainIDs map[string]struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCrossClusterApplyParentClosePolicyTask", transferTask, targetCluster, childDomainIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateCrossClusterApplyParentClosePolicyTask indicates an expected call of GenerateCrossClusterApplyParentClosePolicyTask
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateCrossClusterApplyParentClosePolicyTask(transferTask, targetCluster, childDomainIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCrossClusterApplyParentClosePolicyTask", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateCrossClusterApplyParentClosePolicyTask), transferTask, targetCluster, childDomainIDs)
}

// GenerateFromCrossClusterTask mocks base method
func (m *MockMutableStateTaskGenerator) GenerateFromCrossClusterTask(crossClusterTask *persistence.CrossClusterTaskInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromCrossClusterTask", crossClusterTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateFromCrossClusterTask indicates an expected call of GenerateFromCrossClusterTask
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateFromCrossClusterTask(crossClusterTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromCrossClusterTask", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateFromCrossClusterTask), crossClusterTask)
}

// GenerateActivityTimerTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateActivityTimerTasks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateActivityTimerTasks")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateActivityTimerTasks indicates an expected call of GenerateActivityTimerTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateActivityTimerTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateActivityTimerTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateActivityTimerTasks))
}

// GenerateUserTimerTasks mocks base method
func (m *MockMutableStateTaskGenerator) GenerateUserTimerTasks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserTimerTasks")
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateUserTimerTasks indicates an expected call of GenerateUserTimerTasks
func (mr *MockMutableStateTaskGeneratorMockRecorder) GenerateUserTimerTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserTimerTasks", reflect.TypeOf((*MockMutableStateTaskGenerator)(nil).GenerateUserTimerTasks))
}
