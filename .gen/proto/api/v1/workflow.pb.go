// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/workflow.proto

package apiv1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PendingActivityState int32

const (
	PendingActivityState_PENDING_ACTIVITY_STATE_INVALID          PendingActivityState = 0
	PendingActivityState_PENDING_ACTIVITY_STATE_SCHEDULED        PendingActivityState = 1
	PendingActivityState_PENDING_ACTIVITY_STATE_STARTED          PendingActivityState = 2
	PendingActivityState_PENDING_ACTIVITY_STATE_CANCEL_REQUESTED PendingActivityState = 3
)

var PendingActivityState_name = map[int32]string{
	0: "PENDING_ACTIVITY_STATE_INVALID",
	1: "PENDING_ACTIVITY_STATE_SCHEDULED",
	2: "PENDING_ACTIVITY_STATE_STARTED",
	3: "PENDING_ACTIVITY_STATE_CANCEL_REQUESTED",
}

var PendingActivityState_value = map[string]int32{
	"PENDING_ACTIVITY_STATE_INVALID":          0,
	"PENDING_ACTIVITY_STATE_SCHEDULED":        1,
	"PENDING_ACTIVITY_STATE_STARTED":          2,
	"PENDING_ACTIVITY_STATE_CANCEL_REQUESTED": 3,
}

func (x PendingActivityState) String() string {
	return proto.EnumName(PendingActivityState_name, int32(x))
}

func (PendingActivityState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{0}
}

type PendingDecisionState int32

const (
	PendingDecisionState_PENDING_DECISION_STATE_INVALID   PendingDecisionState = 0
	PendingDecisionState_PENDING_DECISION_STATE_SCHEDULED PendingDecisionState = 1
	PendingDecisionState_PENDING_DECISION_STATE_STARTED   PendingDecisionState = 2
)

var PendingDecisionState_name = map[int32]string{
	0: "PENDING_DECISION_STATE_INVALID",
	1: "PENDING_DECISION_STATE_SCHEDULED",
	2: "PENDING_DECISION_STATE_STARTED",
}

var PendingDecisionState_value = map[string]int32{
	"PENDING_DECISION_STATE_INVALID":   0,
	"PENDING_DECISION_STATE_SCHEDULED": 1,
	"PENDING_DECISION_STATE_STARTED":   2,
}

func (x PendingDecisionState) String() string {
	return proto.EnumName(PendingDecisionState_name, int32(x))
}

func (PendingDecisionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{1}
}

type WorkflowIdReusePolicy int32

const (
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_INVALID WorkflowIdReusePolicy = 0
	// Allow start a workflow execution using the same workflow ID,
	// when workflow not running, and the last execution close state is in [terminated, cancelled, timeouted, failed].
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY WorkflowIdReusePolicy = 1
	// Allow start a workflow execution using the same workflow ID, when workflow not running.
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE WorkflowIdReusePolicy = 2
	// Do not allow start a workflow execution using the same workflow ID at all.
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE WorkflowIdReusePolicy = 3
	// If a workflow is running using the same workflow ID, terminate it and start a new one.
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING WorkflowIdReusePolicy = 4
)

var WorkflowIdReusePolicy_name = map[int32]string{
	0: "WORKFLOW_ID_REUSE_POLICY_INVALID",
	1: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY",
	2: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE",
	3: "WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE",
	4: "WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING",
}

var WorkflowIdReusePolicy_value = map[string]int32{
	"WORKFLOW_ID_REUSE_POLICY_INVALID":                     0,
	"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY": 1,
	"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE":             2,
	"WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE":            3,
	"WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING":        4,
}

func (x WorkflowIdReusePolicy) String() string {
	return proto.EnumName(WorkflowIdReusePolicy_name, int32(x))
}

func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{2}
}

type ParentClosePolicy int32

const (
	ParentClosePolicy_PARENT_CLOSE_POLICY_INVALID ParentClosePolicy = 0
	// Abandon means not doing anything on the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON ParentClosePolicy = 1
	// Cancel means requesting cancellation on the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 2
	// Terminate means terminating the child workflow.
	ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE ParentClosePolicy = 3
)

var ParentClosePolicy_name = map[int32]string{
	0: "PARENT_CLOSE_POLICY_INVALID",
	1: "PARENT_CLOSE_POLICY_ABANDON",
	2: "PARENT_CLOSE_POLICY_REQUEST_CANCEL",
	3: "PARENT_CLOSE_POLICY_TERMINATE",
}

var ParentClosePolicy_value = map[string]int32{
	"PARENT_CLOSE_POLICY_INVALID":        0,
	"PARENT_CLOSE_POLICY_ABANDON":        1,
	"PARENT_CLOSE_POLICY_REQUEST_CANCEL": 2,
	"PARENT_CLOSE_POLICY_TERMINATE":      3,
}

func (x ParentClosePolicy) String() string {
	return proto.EnumName(ParentClosePolicy_name, int32(x))
}

func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{3}
}

type WorkflowExecutionCloseStatus int32

const (
	WorkflowExecutionCloseStatus_WORKFLOW_EXECUTION_CLOSE_STATUS_INVALID          WorkflowExecutionCloseStatus = 0
	WorkflowExecutionCloseStatus_WORKFLOW_EXECUTION_CLOSE_STATUS_COMPLETED        WorkflowExecutionCloseStatus = 1
	WorkflowExecutionCloseStatus_WORKFLOW_EXECUTION_CLOSE_STATUS_FAILED           WorkflowExecutionCloseStatus = 2
	WorkflowExecutionCloseStatus_WORKFLOW_EXECUTION_CLOSE_STATUS_CANCELED         WorkflowExecutionCloseStatus = 3
	WorkflowExecutionCloseStatus_WORKFLOW_EXECUTION_CLOSE_STATUS_TERMINATED       WorkflowExecutionCloseStatus = 4
	WorkflowExecutionCloseStatus_WORKFLOW_EXECUTION_CLOSE_STATUS_CONTINUED_AS_NEW WorkflowExecutionCloseStatus = 5
	WorkflowExecutionCloseStatus_WORKFLOW_EXECUTION_CLOSE_STATUS_TIMED_OUT        WorkflowExecutionCloseStatus = 6
)

var WorkflowExecutionCloseStatus_name = map[int32]string{
	0: "WORKFLOW_EXECUTION_CLOSE_STATUS_INVALID",
	1: "WORKFLOW_EXECUTION_CLOSE_STATUS_COMPLETED",
	2: "WORKFLOW_EXECUTION_CLOSE_STATUS_FAILED",
	3: "WORKFLOW_EXECUTION_CLOSE_STATUS_CANCELED",
	4: "WORKFLOW_EXECUTION_CLOSE_STATUS_TERMINATED",
	5: "WORKFLOW_EXECUTION_CLOSE_STATUS_CONTINUED_AS_NEW",
	6: "WORKFLOW_EXECUTION_CLOSE_STATUS_TIMED_OUT",
}

var WorkflowExecutionCloseStatus_value = map[string]int32{
	"WORKFLOW_EXECUTION_CLOSE_STATUS_INVALID":          0,
	"WORKFLOW_EXECUTION_CLOSE_STATUS_COMPLETED":        1,
	"WORKFLOW_EXECUTION_CLOSE_STATUS_FAILED":           2,
	"WORKFLOW_EXECUTION_CLOSE_STATUS_CANCELED":         3,
	"WORKFLOW_EXECUTION_CLOSE_STATUS_TERMINATED":       4,
	"WORKFLOW_EXECUTION_CLOSE_STATUS_CONTINUED_AS_NEW": 5,
	"WORKFLOW_EXECUTION_CLOSE_STATUS_TIMED_OUT":        6,
}

func (x WorkflowExecutionCloseStatus) String() string {
	return proto.EnumName(WorkflowExecutionCloseStatus_name, int32(x))
}

func (WorkflowExecutionCloseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{4}
}

type ContinueAsNewInitiator int32

const (
	ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_INVALID       ContinueAsNewInitiator = 0
	ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_DECIDER       ContinueAsNewInitiator = 1
	ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_RETRY_POLICY  ContinueAsNewInitiator = 2
	ContinueAsNewInitiator_CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE ContinueAsNewInitiator = 3
)

var ContinueAsNewInitiator_name = map[int32]string{
	0: "CONTINUE_AS_NEW_INITIATOR_INVALID",
	1: "CONTINUE_AS_NEW_INITIATOR_DECIDER",
	2: "CONTINUE_AS_NEW_INITIATOR_RETRY_POLICY",
	3: "CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE",
}

var ContinueAsNewInitiator_value = map[string]int32{
	"CONTINUE_AS_NEW_INITIATOR_INVALID":       0,
	"CONTINUE_AS_NEW_INITIATOR_DECIDER":       1,
	"CONTINUE_AS_NEW_INITIATOR_RETRY_POLICY":  2,
	"CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE": 3,
}

func (x ContinueAsNewInitiator) String() string {
	return proto.EnumName(ContinueAsNewInitiator_name, int32(x))
}

func (ContinueAsNewInitiator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{5}
}

type TimeoutType int32

const (
	TimeoutType_TIMEOUT_TYPE_INVALID           TimeoutType = 0
	TimeoutType_TIMEOUT_TYPE_START_TO_CLOSE    TimeoutType = 1
	TimeoutType_TIMEOUT_TYPE_SCHEDULE_TO_START TimeoutType = 2
	TimeoutType_TIMEOUT_TYPE_SCHEDULE_TO_CLOSE TimeoutType = 3
	TimeoutType_TIMEOUT_TYPE_HEARTBEAT         TimeoutType = 4
)

var TimeoutType_name = map[int32]string{
	0: "TIMEOUT_TYPE_INVALID",
	1: "TIMEOUT_TYPE_START_TO_CLOSE",
	2: "TIMEOUT_TYPE_SCHEDULE_TO_START",
	3: "TIMEOUT_TYPE_SCHEDULE_TO_CLOSE",
	4: "TIMEOUT_TYPE_HEARTBEAT",
}

var TimeoutType_value = map[string]int32{
	"TIMEOUT_TYPE_INVALID":           0,
	"TIMEOUT_TYPE_START_TO_CLOSE":    1,
	"TIMEOUT_TYPE_SCHEDULE_TO_START": 2,
	"TIMEOUT_TYPE_SCHEDULE_TO_CLOSE": 3,
	"TIMEOUT_TYPE_HEARTBEAT":         4,
}

func (x TimeoutType) String() string {
	return proto.EnumName(TimeoutType_name, int32(x))
}

func (TimeoutType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{6}
}

type DecisionTaskTimedOutCause int32

const (
	DecisionTaskTimedOutCause_DECISION_TASK_TIMED_OUT_CAUSE_INVALID DecisionTaskTimedOutCause = 0
	DecisionTaskTimedOutCause_DECISION_TASK_TIMED_OUT_CAUSE_TIMEOUT DecisionTaskTimedOutCause = 1
	DecisionTaskTimedOutCause_DECISION_TASK_TIMED_OUT_CAUSE_RESET   DecisionTaskTimedOutCause = 2
)

var DecisionTaskTimedOutCause_name = map[int32]string{
	0: "DECISION_TASK_TIMED_OUT_CAUSE_INVALID",
	1: "DECISION_TASK_TIMED_OUT_CAUSE_TIMEOUT",
	2: "DECISION_TASK_TIMED_OUT_CAUSE_RESET",
}

var DecisionTaskTimedOutCause_value = map[string]int32{
	"DECISION_TASK_TIMED_OUT_CAUSE_INVALID": 0,
	"DECISION_TASK_TIMED_OUT_CAUSE_TIMEOUT": 1,
	"DECISION_TASK_TIMED_OUT_CAUSE_RESET":   2,
}

func (x DecisionTaskTimedOutCause) String() string {
	return proto.EnumName(DecisionTaskTimedOutCause_name, int32(x))
}

func (DecisionTaskTimedOutCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{7}
}

type DecisionTaskFailedCause int32

const (
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_INVALID                                                   DecisionTaskFailedCause = 0
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_UNHANDLED_DECISION                                        DecisionTaskFailedCause = 1
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES                          DecisionTaskFailedCause = 2
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES                    DecisionTaskFailedCause = 3
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES                                DecisionTaskFailedCause = 4
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES                               DecisionTaskFailedCause = 5
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES                              DecisionTaskFailedCause = 6
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES                DecisionTaskFailedCause = 7
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES                    DecisionTaskFailedCause = 8
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES                  DecisionTaskFailedCause = 9
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES DecisionTaskFailedCause = 10
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES                            DecisionTaskFailedCause = 11
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID                                  DecisionTaskFailedCause = 12
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_RESET_STICKY_TASK_LIST                                    DecisionTaskFailedCause = 13
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE                         DecisionTaskFailedCause = 14
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES                  DecisionTaskFailedCause = 15
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES                      DecisionTaskFailedCause = 16
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_FORCE_CLOSE_DECISION                                      DecisionTaskFailedCause = 17
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_FAILOVER_CLOSE_DECISION                                   DecisionTaskFailedCause = 18
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE                                     DecisionTaskFailedCause = 19
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_RESET_WORKFLOW                                            DecisionTaskFailedCause = 20
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_BINARY                                                DecisionTaskFailedCause = 21
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID                            DecisionTaskFailedCause = 22
	DecisionTaskFailedCause_DECISION_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES                                     DecisionTaskFailedCause = 23
)

var DecisionTaskFailedCause_name = map[int32]string{
	0:  "DECISION_TASK_FAILED_CAUSE_INVALID",
	1:  "DECISION_TASK_FAILED_CAUSE_UNHANDLED_DECISION",
	2:  "DECISION_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES",
	3:  "DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES",
	4:  "DECISION_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES",
	5:  "DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES",
	6:  "DECISION_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES",
	7:  "DECISION_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES",
	8:  "DECISION_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES",
	9:  "DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES",
	10: "DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES",
	11: "DECISION_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES",
	12: "DECISION_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID",
	13: "DECISION_TASK_FAILED_CAUSE_RESET_STICKY_TASK_LIST",
	14: "DECISION_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE",
	15: "DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES",
	16: "DECISION_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES",
	17: "DECISION_TASK_FAILED_CAUSE_FORCE_CLOSE_DECISION",
	18: "DECISION_TASK_FAILED_CAUSE_FAILOVER_CLOSE_DECISION",
	19: "DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE",
	20: "DECISION_TASK_FAILED_CAUSE_RESET_WORKFLOW",
	21: "DECISION_TASK_FAILED_CAUSE_BAD_BINARY",
	22: "DECISION_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID",
	23: "DECISION_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES",
}

var DecisionTaskFailedCause_value = map[string]int32{
	"DECISION_TASK_FAILED_CAUSE_INVALID":                                                   0,
	"DECISION_TASK_FAILED_CAUSE_UNHANDLED_DECISION":                                        1,
	"DECISION_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES":                          2,
	"DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES":                    3,
	"DECISION_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES":                                4,
	"DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES":                               5,
	"DECISION_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES":                              6,
	"DECISION_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES":                7,
	"DECISION_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES":                    8,
	"DECISION_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES":                  9,
	"DECISION_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES": 10,
	"DECISION_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES":                            11,
	"DECISION_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID":                                  12,
	"DECISION_TASK_FAILED_CAUSE_RESET_STICKY_TASK_LIST":                                    13,
	"DECISION_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE":                         14,
	"DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES":                  15,
	"DECISION_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES":                      16,
	"DECISION_TASK_FAILED_CAUSE_FORCE_CLOSE_DECISION":                                      17,
	"DECISION_TASK_FAILED_CAUSE_FAILOVER_CLOSE_DECISION":                                   18,
	"DECISION_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE":                                     19,
	"DECISION_TASK_FAILED_CAUSE_RESET_WORKFLOW":                                            20,
	"DECISION_TASK_FAILED_CAUSE_BAD_BINARY":                                                21,
	"DECISION_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID":                            22,
	"DECISION_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES":                                     23,
}

func (x DecisionTaskFailedCause) String() string {
	return proto.EnumName(DecisionTaskFailedCause_name, int32(x))
}

func (DecisionTaskFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{8}
}

type ChildWorkflowExecutionFailedCause int32

const (
	ChildWorkflowExecutionFailedCause_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID                  ChildWorkflowExecutionFailedCause = 0
	ChildWorkflowExecutionFailedCause_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_RUNNING ChildWorkflowExecutionFailedCause = 1
)

var ChildWorkflowExecutionFailedCause_name = map[int32]string{
	0: "CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID",
	1: "CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_RUNNING",
}

var ChildWorkflowExecutionFailedCause_value = map[string]int32{
	"CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID":                  0,
	"CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_RUNNING": 1,
}

func (x ChildWorkflowExecutionFailedCause) String() string {
	return proto.EnumName(ChildWorkflowExecutionFailedCause_name, int32(x))
}

func (ChildWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{9}
}

type CancelExternalWorkflowExecutionFailedCause int32

const (
	CancelExternalWorkflowExecutionFailedCause_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID                             CancelExternalWorkflowExecutionFailedCause = 0
	CancelExternalWorkflowExecutionFailedCause_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION CancelExternalWorkflowExecutionFailedCause = 1
)

var CancelExternalWorkflowExecutionFailedCause_name = map[int32]string{
	0: "CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID",
	1: "CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION",
}

var CancelExternalWorkflowExecutionFailedCause_value = map[string]int32{
	"CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID":                             0,
	"CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION": 1,
}

func (x CancelExternalWorkflowExecutionFailedCause) String() string {
	return proto.EnumName(CancelExternalWorkflowExecutionFailedCause_name, int32(x))
}

func (CancelExternalWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{10}
}

type SignalExternalWorkflowExecutionFailedCause int32

const (
	SignalExternalWorkflowExecutionFailedCause_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID                             SignalExternalWorkflowExecutionFailedCause = 0
	SignalExternalWorkflowExecutionFailedCause_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION SignalExternalWorkflowExecutionFailedCause = 1
)

var SignalExternalWorkflowExecutionFailedCause_name = map[int32]string{
	0: "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID",
	1: "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION",
}

var SignalExternalWorkflowExecutionFailedCause_value = map[string]int32{
	"SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_INVALID":                             0,
	"SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION": 1,
}

func (x SignalExternalWorkflowExecutionFailedCause) String() string {
	return proto.EnumName(SignalExternalWorkflowExecutionFailedCause_name, int32(x))
}

func (SignalExternalWorkflowExecutionFailedCause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{11}
}

type WorkflowExecutionInfo struct {
	WorkflowExecution    *WorkflowExecution           `protobuf:"bytes,1,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	Type                 *WorkflowType                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	StartTime            *types.Timestamp             `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	CloseTime            *types.Timestamp             `protobuf:"bytes,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	CloseStatus          WorkflowExecutionCloseStatus `protobuf:"varint,5,opt,name=close_status,json=closeStatus,proto3,enum=uber.cadence.api.v1.WorkflowExecutionCloseStatus" json:"close_status,omitempty"`
	HistoryLength        int64                        `protobuf:"varint,6,opt,name=history_length,json=historyLength,proto3" json:"history_length,omitempty"`
	ParentExecutionInfo  *ParentExecutionInfo         `protobuf:"bytes,7,opt,name=parent_execution_info,json=parentExecutionInfo,proto3" json:"parent_execution_info,omitempty"`
	ExecutionTime        *types.Timestamp             `protobuf:"bytes,8,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	Memo                 *Memo                        `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes     *SearchAttributes            `protobuf:"bytes,10,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	AutoResetPoints      *ResetPoints                 `protobuf:"bytes,11,opt,name=auto_reset_points,json=autoResetPoints,proto3" json:"auto_reset_points,omitempty"`
	TaskList             string                       `protobuf:"bytes,12,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	IsCron               bool                         `protobuf:"varint,13,opt,name=is_cron,json=isCron,proto3" json:"is_cron,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *WorkflowExecutionInfo) Reset()         { *m = WorkflowExecutionInfo{} }
func (m *WorkflowExecutionInfo) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionInfo) ProtoMessage()    {}
func (*WorkflowExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{0}
}
func (m *WorkflowExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionInfo.Merge(m, src)
}
func (m *WorkflowExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionInfo proto.InternalMessageInfo

func (m *WorkflowExecutionInfo) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetType() *WorkflowType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetStartTime() *types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetCloseTime() *types.Timestamp {
	if m != nil {
		return m.CloseTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetCloseStatus() WorkflowExecutionCloseStatus {
	if m != nil {
		return m.CloseStatus
	}
	return WorkflowExecutionCloseStatus_WORKFLOW_EXECUTION_CLOSE_STATUS_INVALID
}

func (m *WorkflowExecutionInfo) GetHistoryLength() int64 {
	if m != nil {
		return m.HistoryLength
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetParentExecutionInfo() *ParentExecutionInfo {
	if m != nil {
		return m.ParentExecutionInfo
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetExecutionTime() *types.Timestamp {
	if m != nil {
		return m.ExecutionTime
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetMemo() *Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetSearchAttributes() *SearchAttributes {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetAutoResetPoints() *ResetPoints {
	if m != nil {
		return m.AutoResetPoints
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetTaskList() string {
	if m != nil {
		return m.TaskList
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetIsCron() bool {
	if m != nil {
		return m.IsCron
	}
	return false
}

type WorkflowExecutionConfiguration struct {
	TaskList                     *TaskList       `protobuf:"bytes,1,opt,name=task_list,json=taskList,proto3" json:"task_list,omitempty"`
	ExecutionStartToCloseTimeout *types.Duration `protobuf:"bytes,2,opt,name=execution_start_to_close_timeout,json=executionStartToCloseTimeout,proto3" json:"execution_start_to_close_timeout,omitempty"`
	TaskStartToCloseTimeout      *types.Duration `protobuf:"bytes,3,opt,name=task_start_to_close_timeout,json=taskStartToCloseTimeout,proto3" json:"task_start_to_close_timeout,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}        `json:"-"`
	XXX_unrecognized             []byte          `json:"-"`
	XXX_sizecache                int32           `json:"-"`
}

func (m *WorkflowExecutionConfiguration) Reset()         { *m = WorkflowExecutionConfiguration{} }
func (m *WorkflowExecutionConfiguration) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionConfiguration) ProtoMessage()    {}
func (*WorkflowExecutionConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{1}
}
func (m *WorkflowExecutionConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionConfiguration.Merge(m, src)
}
func (m *WorkflowExecutionConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionConfiguration proto.InternalMessageInfo

func (m *WorkflowExecutionConfiguration) GetTaskList() *TaskList {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *WorkflowExecutionConfiguration) GetExecutionStartToCloseTimeout() *types.Duration {
	if m != nil {
		return m.ExecutionStartToCloseTimeout
	}
	return nil
}

func (m *WorkflowExecutionConfiguration) GetTaskStartToCloseTimeout() *types.Duration {
	if m != nil {
		return m.TaskStartToCloseTimeout
	}
	return nil
}

type ParentExecutionInfo struct {
	DomainId             string             `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DomainName           string             `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	WorkflowExecution    *WorkflowExecution `protobuf:"bytes,3,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	InitiatedId          int64              `protobuf:"varint,4,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ParentExecutionInfo) Reset()         { *m = ParentExecutionInfo{} }
func (m *ParentExecutionInfo) String() string { return proto.CompactTextString(m) }
func (*ParentExecutionInfo) ProtoMessage()    {}
func (*ParentExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{2}
}
func (m *ParentExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParentExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParentExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParentExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParentExecutionInfo.Merge(m, src)
}
func (m *ParentExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ParentExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ParentExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ParentExecutionInfo proto.InternalMessageInfo

func (m *ParentExecutionInfo) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *ParentExecutionInfo) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ParentExecutionInfo) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ParentExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

type ExternalExecutionInfo struct {
	WorkflowExecution    *WorkflowExecution `protobuf:"bytes,1,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	InitiatedId          int64              `protobuf:"varint,2,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ExternalExecutionInfo) Reset()         { *m = ExternalExecutionInfo{} }
func (m *ExternalExecutionInfo) String() string { return proto.CompactTextString(m) }
func (*ExternalExecutionInfo) ProtoMessage()    {}
func (*ExternalExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{3}
}
func (m *ExternalExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalExecutionInfo.Merge(m, src)
}
func (m *ExternalExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExternalExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalExecutionInfo proto.InternalMessageInfo

func (m *ExternalExecutionInfo) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *ExternalExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

type PendingActivityInfo struct {
	ActivityId           string               `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType         *ActivityType        `protobuf:"bytes,2,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	State                PendingActivityState `protobuf:"varint,3,opt,name=state,proto3,enum=uber.cadence.api.v1.PendingActivityState" json:"state,omitempty"`
	HeartbeatDetails     *Payload             `protobuf:"bytes,4,opt,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	LastHeartbeatTime    *types.Timestamp     `protobuf:"bytes,5,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
	LastStartedTime      *types.Timestamp     `protobuf:"bytes,6,opt,name=last_started_time,json=lastStartedTime,proto3" json:"last_started_time,omitempty"`
	Attempt              int32                `protobuf:"varint,7,opt,name=attempt,proto3" json:"attempt,omitempty"`
	MaximumAttempts      int32                `protobuf:"varint,8,opt,name=maximum_attempts,json=maximumAttempts,proto3" json:"maximum_attempts,omitempty"`
	ScheduledTime        *types.Timestamp     `protobuf:"bytes,9,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	ExpirationTime       *types.Timestamp     `protobuf:"bytes,10,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	LastFailure          *Failure             `protobuf:"bytes,11,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
	LastWorkerIdentity   string               `protobuf:"bytes,12,opt,name=last_worker_identity,json=lastWorkerIdentity,proto3" json:"last_worker_identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PendingActivityInfo) Reset()         { *m = PendingActivityInfo{} }
func (m *PendingActivityInfo) String() string { return proto.CompactTextString(m) }
func (*PendingActivityInfo) ProtoMessage()    {}
func (*PendingActivityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{4}
}
func (m *PendingActivityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingActivityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingActivityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingActivityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingActivityInfo.Merge(m, src)
}
func (m *PendingActivityInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingActivityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingActivityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingActivityInfo proto.InternalMessageInfo

func (m *PendingActivityInfo) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *PendingActivityInfo) GetActivityType() *ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *PendingActivityInfo) GetState() PendingActivityState {
	if m != nil {
		return m.State
	}
	return PendingActivityState_PENDING_ACTIVITY_STATE_INVALID
}

func (m *PendingActivityInfo) GetHeartbeatDetails() *Payload {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *PendingActivityInfo) GetLastHeartbeatTime() *types.Timestamp {
	if m != nil {
		return m.LastHeartbeatTime
	}
	return nil
}

func (m *PendingActivityInfo) GetLastStartedTime() *types.Timestamp {
	if m != nil {
		return m.LastStartedTime
	}
	return nil
}

func (m *PendingActivityInfo) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PendingActivityInfo) GetMaximumAttempts() int32 {
	if m != nil {
		return m.MaximumAttempts
	}
	return 0
}

func (m *PendingActivityInfo) GetScheduledTime() *types.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PendingActivityInfo) GetExpirationTime() *types.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *PendingActivityInfo) GetLastFailure() *Failure {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

func (m *PendingActivityInfo) GetLastWorkerIdentity() string {
	if m != nil {
		return m.LastWorkerIdentity
	}
	return ""
}

type PendingChildExecutionInfo struct {
	WorkflowExecution    *WorkflowExecution `protobuf:"bytes,1,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowTypeName     string             `protobuf:"bytes,2,opt,name=workflow_type_name,json=workflowTypeName,proto3" json:"workflow_type_name,omitempty"`
	InitiatedId          int64              `protobuf:"varint,3,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
	ParentClosePolicy    ParentClosePolicy  `protobuf:"varint,4,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=uber.cadence.api.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PendingChildExecutionInfo) Reset()         { *m = PendingChildExecutionInfo{} }
func (m *PendingChildExecutionInfo) String() string { return proto.CompactTextString(m) }
func (*PendingChildExecutionInfo) ProtoMessage()    {}
func (*PendingChildExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{5}
}
func (m *PendingChildExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingChildExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingChildExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingChildExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingChildExecutionInfo.Merge(m, src)
}
func (m *PendingChildExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingChildExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingChildExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingChildExecutionInfo proto.InternalMessageInfo

func (m *PendingChildExecutionInfo) GetWorkflowExecution() *WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PendingChildExecutionInfo) GetWorkflowTypeName() string {
	if m != nil {
		return m.WorkflowTypeName
	}
	return ""
}

func (m *PendingChildExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

func (m *PendingChildExecutionInfo) GetParentClosePolicy() ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return ParentClosePolicy_PARENT_CLOSE_POLICY_INVALID
}

type PendingDecisionInfo struct {
	State                 PendingDecisionState `protobuf:"varint,1,opt,name=state,proto3,enum=uber.cadence.api.v1.PendingDecisionState" json:"state,omitempty"`
	ScheduledTime         *types.Timestamp     `protobuf:"bytes,2,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedTime           *types.Timestamp     `protobuf:"bytes,3,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	Attempt               int32                `protobuf:"varint,4,opt,name=attempt,proto3" json:"attempt,omitempty"`
	OriginalScheduledTime *types.Timestamp     `protobuf:"bytes,5,opt,name=original_scheduled_time,json=originalScheduledTime,proto3" json:"original_scheduled_time,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *PendingDecisionInfo) Reset()         { *m = PendingDecisionInfo{} }
func (m *PendingDecisionInfo) String() string { return proto.CompactTextString(m) }
func (*PendingDecisionInfo) ProtoMessage()    {}
func (*PendingDecisionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{6}
}
func (m *PendingDecisionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingDecisionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingDecisionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingDecisionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingDecisionInfo.Merge(m, src)
}
func (m *PendingDecisionInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingDecisionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingDecisionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingDecisionInfo proto.InternalMessageInfo

func (m *PendingDecisionInfo) GetState() PendingDecisionState {
	if m != nil {
		return m.State
	}
	return PendingDecisionState_PENDING_DECISION_STATE_INVALID
}

func (m *PendingDecisionInfo) GetScheduledTime() *types.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PendingDecisionInfo) GetStartedTime() *types.Timestamp {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *PendingDecisionInfo) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PendingDecisionInfo) GetOriginalScheduledTime() *types.Timestamp {
	if m != nil {
		return m.OriginalScheduledTime
	}
	return nil
}

type ActivityLocalDispatchInfo struct {
	ActivityId                 string           `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ScheduledTime              *types.Timestamp `protobuf:"bytes,2,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	StartedTime                *types.Timestamp `protobuf:"bytes,3,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	ScheduledTimeOfThisAttempt *types.Timestamp `protobuf:"bytes,4,opt,name=scheduled_time_of_this_attempt,json=scheduledTimeOfThisAttempt,proto3" json:"scheduled_time_of_this_attempt,omitempty"`
	TaskToken                  []byte           `protobuf:"bytes,5,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}         `json:"-"`
	XXX_unrecognized           []byte           `json:"-"`
	XXX_sizecache              int32            `json:"-"`
}

func (m *ActivityLocalDispatchInfo) Reset()         { *m = ActivityLocalDispatchInfo{} }
func (m *ActivityLocalDispatchInfo) String() string { return proto.CompactTextString(m) }
func (*ActivityLocalDispatchInfo) ProtoMessage()    {}
func (*ActivityLocalDispatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{7}
}
func (m *ActivityLocalDispatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityLocalDispatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityLocalDispatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityLocalDispatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityLocalDispatchInfo.Merge(m, src)
}
func (m *ActivityLocalDispatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActivityLocalDispatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityLocalDispatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityLocalDispatchInfo proto.InternalMessageInfo

func (m *ActivityLocalDispatchInfo) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ActivityLocalDispatchInfo) GetScheduledTime() *types.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *ActivityLocalDispatchInfo) GetStartedTime() *types.Timestamp {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *ActivityLocalDispatchInfo) GetScheduledTimeOfThisAttempt() *types.Timestamp {
	if m != nil {
		return m.ScheduledTimeOfThisAttempt
	}
	return nil
}

func (m *ActivityLocalDispatchInfo) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

type ResetPoints struct {
	Points               []*ResetPointInfo `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResetPoints) Reset()         { *m = ResetPoints{} }
func (m *ResetPoints) String() string { return proto.CompactTextString(m) }
func (*ResetPoints) ProtoMessage()    {}
func (*ResetPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{8}
}
func (m *ResetPoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetPoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPoints.Merge(m, src)
}
func (m *ResetPoints) XXX_Size() int {
	return m.Size()
}
func (m *ResetPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPoints.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPoints proto.InternalMessageInfo

func (m *ResetPoints) GetPoints() []*ResetPointInfo {
	if m != nil {
		return m.Points
	}
	return nil
}

type ResetPointInfo struct {
	BinaryChecksum           string           `protobuf:"bytes,1,opt,name=binary_checksum,json=binaryChecksum,proto3" json:"binary_checksum,omitempty"`
	RunId                    string           `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	FirstDecisionCompletedId int64            `protobuf:"varint,3,opt,name=first_decision_completed_id,json=firstDecisionCompletedId,proto3" json:"first_decision_completed_id,omitempty"`
	CreatedTime              *types.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	ExpiringTime             *types.Timestamp `protobuf:"bytes,5,opt,name=expiring_time,json=expiringTime,proto3" json:"expiring_time,omitempty"`
	Resettable               bool             `protobuf:"varint,6,opt,name=resettable,proto3" json:"resettable,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}         `json:"-"`
	XXX_unrecognized         []byte           `json:"-"`
	XXX_sizecache            int32            `json:"-"`
}

func (m *ResetPointInfo) Reset()         { *m = ResetPointInfo{} }
func (m *ResetPointInfo) String() string { return proto.CompactTextString(m) }
func (*ResetPointInfo) ProtoMessage()    {}
func (*ResetPointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2775eefb5053680f, []int{9}
}
func (m *ResetPointInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetPointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetPointInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetPointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPointInfo.Merge(m, src)
}
func (m *ResetPointInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResetPointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPointInfo proto.InternalMessageInfo

func (m *ResetPointInfo) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

func (m *ResetPointInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ResetPointInfo) GetFirstDecisionCompletedId() int64 {
	if m != nil {
		return m.FirstDecisionCompletedId
	}
	return 0
}

func (m *ResetPointInfo) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ResetPointInfo) GetExpiringTime() *types.Timestamp {
	if m != nil {
		return m.ExpiringTime
	}
	return nil
}

func (m *ResetPointInfo) GetResettable() bool {
	if m != nil {
		return m.Resettable
	}
	return false
}

func init() {
	proto.RegisterEnum("uber.cadence.api.v1.PendingActivityState", PendingActivityState_name, PendingActivityState_value)
	proto.RegisterEnum("uber.cadence.api.v1.PendingDecisionState", PendingDecisionState_name, PendingDecisionState_value)
	proto.RegisterEnum("uber.cadence.api.v1.WorkflowIdReusePolicy", WorkflowIdReusePolicy_name, WorkflowIdReusePolicy_value)
	proto.RegisterEnum("uber.cadence.api.v1.ParentClosePolicy", ParentClosePolicy_name, ParentClosePolicy_value)
	proto.RegisterEnum("uber.cadence.api.v1.WorkflowExecutionCloseStatus", WorkflowExecutionCloseStatus_name, WorkflowExecutionCloseStatus_value)
	proto.RegisterEnum("uber.cadence.api.v1.ContinueAsNewInitiator", ContinueAsNewInitiator_name, ContinueAsNewInitiator_value)
	proto.RegisterEnum("uber.cadence.api.v1.TimeoutType", TimeoutType_name, TimeoutType_value)
	proto.RegisterEnum("uber.cadence.api.v1.DecisionTaskTimedOutCause", DecisionTaskTimedOutCause_name, DecisionTaskTimedOutCause_value)
	proto.RegisterEnum("uber.cadence.api.v1.DecisionTaskFailedCause", DecisionTaskFailedCause_name, DecisionTaskFailedCause_value)
	proto.RegisterEnum("uber.cadence.api.v1.ChildWorkflowExecutionFailedCause", ChildWorkflowExecutionFailedCause_name, ChildWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("uber.cadence.api.v1.CancelExternalWorkflowExecutionFailedCause", CancelExternalWorkflowExecutionFailedCause_name, CancelExternalWorkflowExecutionFailedCause_value)
	proto.RegisterEnum("uber.cadence.api.v1.SignalExternalWorkflowExecutionFailedCause", SignalExternalWorkflowExecutionFailedCause_name, SignalExternalWorkflowExecutionFailedCause_value)
	proto.RegisterType((*WorkflowExecutionInfo)(nil), "uber.cadence.api.v1.WorkflowExecutionInfo")
	proto.RegisterType((*WorkflowExecutionConfiguration)(nil), "uber.cadence.api.v1.WorkflowExecutionConfiguration")
	proto.RegisterType((*ParentExecutionInfo)(nil), "uber.cadence.api.v1.ParentExecutionInfo")
	proto.RegisterType((*ExternalExecutionInfo)(nil), "uber.cadence.api.v1.ExternalExecutionInfo")
	proto.RegisterType((*PendingActivityInfo)(nil), "uber.cadence.api.v1.PendingActivityInfo")
	proto.RegisterType((*PendingChildExecutionInfo)(nil), "uber.cadence.api.v1.PendingChildExecutionInfo")
	proto.RegisterType((*PendingDecisionInfo)(nil), "uber.cadence.api.v1.PendingDecisionInfo")
	proto.RegisterType((*ActivityLocalDispatchInfo)(nil), "uber.cadence.api.v1.ActivityLocalDispatchInfo")
	proto.RegisterType((*ResetPoints)(nil), "uber.cadence.api.v1.ResetPoints")
	proto.RegisterType((*ResetPointInfo)(nil), "uber.cadence.api.v1.ResetPointInfo")
}

func init() {
	proto.RegisterFile("uber/cadence/api/v1/workflow.proto", fileDescriptor_2775eefb5053680f)
}

var fileDescriptor_2775eefb5053680f = []byte{
	// 2302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcf, 0x6f, 0xdb, 0xc8,
	0x15, 0x2e, 0x25, 0xdb, 0xb1, 0x9f, 0xfc, 0x83, 0x1e, 0xc7, 0x6b, 0x25, 0xd9, 0x38, 0x8e, 0xb6,
	0x49, 0x1c, 0x75, 0x23, 0xaf, 0x93, 0xcd, 0xa6, 0xd9, 0x34, 0x4d, 0x69, 0x92, 0x8e, 0x99, 0xc8,
	0x94, 0x3a, 0xa2, 0xe2, 0x78, 0x51, 0x94, 0xa0, 0xa5, 0xb1, 0x4d, 0x44, 0x22, 0x05, 0x92, 0x4a,
	0xe2, 0x7b, 0x81, 0x9e, 0x7b, 0x2b, 0xda, 0x4b, 0xff, 0x80, 0x02, 0x45, 0xff, 0x80, 0xa2, 0x45,
	0x0f, 0x45, 0x2f, 0x05, 0x7a, 0xea, 0xb1, 0x28, 0x72, 0xeb, 0x7f, 0x51, 0xcc, 0x70, 0x28, 0x51,
	0x12, 0x25, 0x2a, 0x2d, 0xb0, 0xbd, 0x99, 0x8f, 0xdf, 0xf7, 0xf1, 0xcd, 0x9b, 0xf7, 0x3e, 0x0e,
	0x2d, 0x28, 0x74, 0x4f, 0x88, 0xb7, 0xd3, 0xb0, 0x9a, 0xc4, 0x69, 0x90, 0x1d, 0xab, 0x63, 0xef,
	0xbc, 0xdd, 0xdd, 0x79, 0xe7, 0x7a, 0x6f, 0x4e, 0x5b, 0xee, 0xbb, 0x52, 0xc7, 0x73, 0x03, 0x17,
	0xad, 0x51, 0x4c, 0x89, 0x63, 0x4a, 0x56, 0xc7, 0x2e, 0xbd, 0xdd, 0xbd, 0xba, 0x79, 0xe6, 0xba,
	0x67, 0x2d, 0xb2, 0xc3, 0x20, 0x27, 0xdd, 0xd3, 0x9d, 0x66, 0xd7, 0xb3, 0x02, 0xdb, 0x75, 0x42,
	0xd2, 0xd5, 0x1b, 0xc3, 0xf7, 0x03, 0xbb, 0x4d, 0xfc, 0xc0, 0x6a, 0x77, 0x38, 0x60, 0x2b, 0xe9,
	0xc9, 0x0d, 0xb7, 0xdd, 0xee, 0x49, 0x24, 0xe6, 0x16, 0x58, 0xfe, 0x9b, 0x96, 0xed, 0x07, 0x21,
	0xa6, 0xf0, 0xa7, 0x39, 0x58, 0x3f, 0xe2, 0xe9, 0xaa, 0xef, 0x49, 0xa3, 0x4b, 0x53, 0xd0, 0x9c,
	0x53, 0x17, 0xd5, 0x01, 0x45, 0xeb, 0x30, 0x49, 0x74, 0x27, 0x2f, 0x6c, 0x09, 0xdb, 0xb9, 0xfb,
	0xb7, 0x4b, 0x09, 0x4b, 0x2a, 0x8d, 0xe8, 0xe0, 0xd5, 0x77, 0xc3, 0x21, 0xf4, 0x10, 0x66, 0x82,
	0x8b, 0x0e, 0xc9, 0x67, 0x98, 0xd0, 0xcd, 0x89, 0x42, 0xc6, 0x45, 0x87, 0x60, 0x06, 0x47, 0x8f,
	0x01, 0xfc, 0xc0, 0xf2, 0x02, 0x93, 0x96, 0x21, 0x9f, 0x65, 0xe4, 0xab, 0xa5, 0xb0, 0x46, 0xa5,
	0xa8, 0x46, 0x25, 0x23, 0xaa, 0x11, 0x5e, 0x60, 0x68, 0x7a, 0x4d, 0xa9, 0x8d, 0x96, 0xeb, 0x93,
	0x90, 0x3a, 0x93, 0x4e, 0x65, 0x68, 0x46, 0x35, 0x60, 0x31, 0xa4, 0xfa, 0x81, 0x15, 0x74, 0xfd,
	0xfc, 0xec, 0x96, 0xb0, 0xbd, 0x7c, 0x7f, 0x77, 0xba, 0xd5, 0xcb, 0x94, 0x59, 0x63, 0x44, 0x9c,
	0x6b, 0xf4, 0x2f, 0xd0, 0x2d, 0x58, 0x3e, 0xb7, 0xfd, 0xc0, 0xf5, 0x2e, 0xcc, 0x16, 0x71, 0xce,
	0x82, 0xf3, 0xfc, 0xdc, 0x96, 0xb0, 0x9d, 0xc5, 0x4b, 0x3c, 0x5a, 0x66, 0x41, 0xf4, 0x13, 0x58,
	0xef, 0x58, 0x1e, 0x71, 0x82, 0x7e, 0xf9, 0x4d, 0xdb, 0x39, 0x75, 0xf3, 0x97, 0xd8, 0x12, 0xb6,
	0x13, 0xb3, 0xa8, 0x32, 0xc6, 0xc0, 0x4e, 0xe2, 0xb5, 0xce, 0x68, 0x10, 0x49, 0xb0, 0xdc, 0x97,
	0x65, 0x95, 0x99, 0x4f, 0xad, 0xcc, 0x52, 0x8f, 0xc1, 0xaa, 0x73, 0x0f, 0x66, 0xda, 0xa4, 0xed,
	0xe6, 0x17, 0x18, 0xf1, 0x4a, 0x62, 0x3e, 0x87, 0xa4, 0xed, 0x62, 0x06, 0x43, 0x18, 0x56, 0x7d,
	0x62, 0x79, 0x8d, 0x73, 0xd3, 0x0a, 0x02, 0xcf, 0x3e, 0xe9, 0x06, 0xc4, 0xcf, 0x03, 0xe3, 0xde,
	0x4a, 0xe4, 0xd6, 0x18, 0x5a, 0xea, 0x81, 0xb1, 0xe8, 0x0f, 0x45, 0x50, 0x19, 0x56, 0xad, 0x6e,
	0xe0, 0x9a, 0x1e, 0xf1, 0x49, 0x60, 0x76, 0x5c, 0xdb, 0x09, 0xfc, 0x7c, 0x8e, 0x69, 0x6e, 0x25,
	0x6a, 0x62, 0x0a, 0xac, 0x32, 0x1c, 0x5e, 0xa1, 0xd4, 0x58, 0x00, 0x5d, 0x83, 0x05, 0x3a, 0x1e,
	0x26, 0x9d, 0x8f, 0xfc, 0xe2, 0x96, 0xb0, 0xbd, 0x80, 0xe7, 0x69, 0xa0, 0x6c, 0xfb, 0x01, 0xda,
	0x80, 0x4b, 0xb6, 0x6f, 0x36, 0x3c, 0xd7, 0xc9, 0x2f, 0x6d, 0x09, 0xdb, 0xf3, 0x78, 0xce, 0xf6,
	0x65, 0xcf, 0x75, 0x0a, 0xbf, 0xcc, 0xc0, 0xe6, 0xe8, 0xe6, 0xbb, 0xce, 0xa9, 0x7d, 0xc6, 0x47,
	0x1a, 0x7d, 0x1d, 0x17, 0x0e, 0x47, 0xe8, 0x7a, 0x62, 0x7a, 0x06, 0x7f, 0x5a, 0xec, 0xb9, 0x16,
	0x6c, 0xf5, 0x37, 0x8a, 0xcf, 0x80, 0x6b, 0xf6, 0x3b, 0xda, 0xed, 0x06, 0x7c, 0x98, 0xae, 0x8c,
	0x6c, 0x9d, 0xc2, 0x13, 0xc0, 0x9f, 0xf6, 0x24, 0x6a, 0x6c, 0x2e, 0x5c, 0x39, 0xea, 0x71, 0xb7,
	0x1b, 0xa0, 0x23, 0xb8, 0xc6, 0xd2, 0x1b, 0xa3, 0x9e, 0x4d, 0x53, 0xdf, 0xa0, 0xec, 0x04, 0xe1,
	0xc2, 0xdf, 0x04, 0x58, 0x4b, 0xe8, 0x48, 0x5a, 0xe8, 0xa6, 0xdb, 0xb6, 0x6c, 0xc7, 0xb4, 0x9b,
	0xac, 0x1e, 0x0b, 0x78, 0x3e, 0x0c, 0x68, 0x4d, 0x74, 0x03, 0x72, 0xfc, 0xa6, 0x63, 0xb5, 0x43,
	0xa3, 0x58, 0xc0, 0x10, 0x86, 0x74, 0xab, 0x4d, 0xc6, 0x38, 0x53, 0xf6, 0x7f, 0x75, 0xa6, 0x9b,
	0xb0, 0x68, 0x3b, 0x76, 0x60, 0x5b, 0x01, 0x69, 0xd2, 0xbc, 0x66, 0xd8, 0x50, 0xe6, 0x7a, 0x31,
	0xad, 0x59, 0xf8, 0x85, 0x00, 0xeb, 0xea, 0xfb, 0x80, 0x78, 0x8e, 0xd5, 0xfa, 0x56, 0xdc, 0x72,
	0x38, 0xa7, 0xcc, 0x68, 0x4e, 0xff, 0x9c, 0x85, 0xb5, 0x2a, 0x71, 0x9a, 0xb6, 0x73, 0x26, 0x35,
	0x02, 0xfb, 0xad, 0x1d, 0x5c, 0xb0, 0x8c, 0x6e, 0x40, 0xce, 0xe2, 0xd7, 0xfd, 0x2a, 0x43, 0x14,
	0xd2, 0x9a, 0x68, 0x1f, 0x96, 0x7a, 0x80, 0x54, 0x4b, 0x8e, 0xa4, 0x99, 0x25, 0x2f, 0x5a, 0xb1,
	0x2b, 0xf4, 0x0c, 0x66, 0xa9, 0x3d, 0x86, 0xae, 0xbc, 0x7c, 0xff, 0x6e, 0xb2, 0x2f, 0x0d, 0x66,
	0x48, 0x9d, 0x90, 0xe0, 0x90, 0x87, 0x34, 0x58, 0x3d, 0x27, 0x96, 0x17, 0x9c, 0x10, 0x2b, 0x30,
	0x9b, 0x24, 0xb0, 0xec, 0x96, 0xcf, 0x7d, 0xfa, 0xd3, 0x31, 0x26, 0x77, 0xd1, 0x72, 0xad, 0x26,
	0x16, 0x7b, 0x34, 0x25, 0x64, 0xa1, 0x17, 0xb0, 0xd6, 0xb2, 0xfc, 0xc0, 0xec, 0xeb, 0x31, 0x6b,
	0x9b, 0x4d, 0xb5, 0xb6, 0x55, 0x4a, 0x3b, 0x88, 0x58, 0xcc, 0xde, 0xf6, 0x81, 0x05, 0xc3, 0xa9,
	0x20, 0xcd, 0x50, 0x69, 0x2e, 0x55, 0x69, 0x85, 0x92, 0x6a, 0x21, 0x87, 0xe9, 0xe4, 0xe1, 0x92,
	0x15, 0x04, 0xa4, 0xdd, 0x09, 0x98, 0x73, 0xcf, 0xe2, 0xe8, 0x12, 0xdd, 0x05, 0xb1, 0x6d, 0xbd,
	0xb7, 0xdb, 0xdd, 0xb6, 0xc9, 0x43, 0x3e, 0x73, 0xe1, 0x59, 0xbc, 0xc2, 0xe3, 0x12, 0x0f, 0x53,
	0xbb, 0xf6, 0x1b, 0xe7, 0xa4, 0xd9, 0x6d, 0x45, 0x99, 0x2c, 0xa4, 0xdb, 0x75, 0x8f, 0xc1, 0xf2,
	0x90, 0x61, 0x85, 0xbc, 0xef, 0xd8, 0xe1, 0xcc, 0x86, 0x1a, 0x90, 0xaa, 0xb1, 0xdc, 0xa7, 0x30,
	0x91, 0x67, 0xb0, 0xc8, 0x8a, 0x72, 0x6a, 0xd9, 0xad, 0xae, 0x47, 0xb8, 0xd7, 0x26, 0x6f, 0xd3,
	0x7e, 0x88, 0xc1, 0x39, 0xca, 0xe0, 0x17, 0xe8, 0x0b, 0xb8, 0xcc, 0x04, 0x68, 0xaf, 0x13, 0xcf,
	0xb4, 0x9b, 0xc4, 0x09, 0xec, 0xe0, 0x82, 0xdb, 0x2d, 0xa2, 0xf7, 0x8e, 0xd8, 0x2d, 0x8d, 0xdf,
	0x29, 0xfc, 0x3a, 0x03, 0x57, 0x78, 0xfb, 0xc8, 0xe7, 0x76, 0xab, 0xf9, 0xad, 0x0c, 0xde, 0xe7,
	0x31, 0x59, 0x3a, 0x1c, 0x71, 0x2f, 0x12, 0xdf, 0xc5, 0xce, 0x27, 0xcc, 0x91, 0x86, 0xc7, 0x34,
	0x3b, 0x32, 0xa6, 0xe8, 0x15, 0xf0, 0xd7, 0x30, 0x37, 0xd7, 0x8e, 0xdb, 0xb2, 0x1b, 0x17, 0xac,
	0xcd, 0x97, 0xc7, 0x24, 0x1a, 0x3a, 0x27, 0x33, 0xd4, 0x2a, 0x43, 0xe3, 0xd5, 0xce, 0x70, 0xa8,
	0xf0, 0x97, 0x4c, 0x6f, 0xfc, 0x15, 0xd2, 0xb0, 0xfd, 0xa8, 0x2e, 0xbd, 0xa9, 0x14, 0xd2, 0xa7,
	0x32, 0x22, 0x0e, 0x4c, 0xe5, 0x68, 0xc7, 0x65, 0x3e, 0xb6, 0xe3, 0x9e, 0xc2, 0xe2, 0xc0, 0xf0,
	0xa4, 0x1f, 0xdb, 0x72, 0x7e, 0xf2, 0xe0, 0xcc, 0x0c, 0x0e, 0x0e, 0x86, 0x0d, 0xd7, 0xb3, 0xcf,
	0x6c, 0xc7, 0x6a, 0x99, 0x43, 0x49, 0xa6, 0x8f, 0xfa, 0x7a, 0x44, 0xad, 0xc5, 0x93, 0x2d, 0xfc,
	0x21, 0x03, 0x57, 0x22, 0x7b, 0x2a, 0xbb, 0x0d, 0xab, 0xa5, 0xd8, 0x7e, 0xc7, 0x0a, 0x1a, 0xe7,
	0xd3, 0xb9, 0xe9, 0xff, 0xbf, 0x5c, 0x3f, 0x85, 0xcd, 0xc1, 0x0c, 0x4c, 0xf7, 0xd4, 0x0c, 0xce,
	0x6d, 0xdf, 0x8c, 0x57, 0x71, 0xb2, 0xe0, 0xd5, 0x81, 0x8c, 0x2a, 0xa7, 0xc6, 0xb9, 0xed, 0x73,
	0x0f, 0x42, 0xd7, 0x01, 0xd8, 0x29, 0x21, 0x70, 0xdf, 0x10, 0x87, 0xd5, 0x79, 0x11, 0xb3, 0x63,
	0x8d, 0x41, 0x03, 0x85, 0x17, 0x90, 0x8b, 0x9f, 0xa5, 0x9e, 0xc0, 0x1c, 0x3f, 0x8e, 0x09, 0x5b,
	0xd9, 0xed, 0xdc, 0xfd, 0xcf, 0x52, 0x8e, 0x63, 0xec, 0xa4, 0xca, 0x29, 0x85, 0xdf, 0x65, 0x60,
	0x79, 0xf0, 0x16, 0xba, 0x03, 0x2b, 0x27, 0xb6, 0x63, 0x79, 0x17, 0x66, 0xe3, 0x9c, 0x34, 0xde,
	0xf8, 0xdd, 0x36, 0xdf, 0x84, 0xe5, 0x30, 0x2c, 0xf3, 0x28, 0x5a, 0x87, 0x39, 0xaf, 0xeb, 0x44,
	0x2f, 0xcb, 0x05, 0x3c, 0xeb, 0x75, 0xe9, 0xa9, 0xe2, 0x29, 0x5c, 0x3b, 0xb5, 0x3d, 0x9f, 0xbe,
	0x60, 0xc2, 0x66, 0x37, 0x1b, 0x6e, 0xbb, 0xd3, 0x22, 0x03, 0x13, 0x9b, 0x67, 0x90, 0x68, 0x1c,
	0xe4, 0x08, 0xc0, 0xe8, 0x8b, 0x0d, 0x8f, 0x58, 0xbd, 0xbd, 0x49, 0x2f, 0x65, 0x8e, 0xe3, 0xb9,
	0x6d, 0x2e, 0x31, 0x23, 0xb5, 0x9d, 0xb3, 0x69, 0xdb, 0x74, 0x31, 0x22, 0x30, 0x81, 0x4d, 0x00,
	0x76, 0xc6, 0x0d, 0xac, 0x93, 0x56, 0xf8, 0x16, 0x9a, 0xc7, 0xb1, 0x48, 0xf1, 0xf7, 0x02, 0x5c,
	0x4e, 0x7a, 0xc7, 0xa2, 0x02, 0x6c, 0x56, 0x55, 0x5d, 0xd1, 0xf4, 0xe7, 0xa6, 0x24, 0x1b, 0xda,
	0x2b, 0xcd, 0x38, 0x36, 0x6b, 0x86, 0x64, 0xa8, 0xa6, 0xa6, 0xbf, 0x92, 0xca, 0x9a, 0x22, 0x7e,
	0x07, 0x7d, 0x17, 0xb6, 0xc6, 0x60, 0x6a, 0xf2, 0x81, 0xaa, 0xd4, 0xcb, 0xaa, 0x22, 0x0a, 0x13,
	0x94, 0x6a, 0x86, 0x84, 0x0d, 0x55, 0x11, 0x33, 0xe8, 0x7b, 0x70, 0x67, 0x0c, 0x46, 0x96, 0x74,
	0x59, 0x2d, 0x9b, 0x58, 0xfd, 0x71, 0x5d, 0xad, 0x51, 0x70, 0xb6, 0xf8, 0xb3, 0x7e, 0xce, 0x03,
	0x0e, 0x14, 0x7f, 0x92, 0xa2, 0xca, 0x5a, 0x4d, 0xab, 0xe8, 0x93, 0x72, 0x1e, 0xc2, 0x8c, 0xc9,
	0x79, 0x18, 0x15, 0xe5, 0x5c, 0xfc, 0x79, 0xa6, 0xff, 0x09, 0xac, 0x35, 0x31, 0xe9, 0x46, 0xde,
	0x4a, 0x9f, 0x71, 0x54, 0xc1, 0x2f, 0xf7, 0xcb, 0x95, 0x23, 0x53, 0x53, 0x4c, 0xac, 0xd6, 0x6b,
	0xaa, 0x59, 0xad, 0x94, 0x35, 0xf9, 0x38, 0x96, 0xc9, 0xf7, 0xe1, 0xcb, 0xb1, 0x28, 0xa9, 0x4c,
	0xa3, 0x4a, 0xbd, 0x5a, 0xd6, 0x64, 0xfa, 0xd4, 0x7d, 0x49, 0x2b, 0xab, 0x8a, 0x59, 0xd1, 0xcb,
	0xc7, 0xa2, 0x80, 0x3e, 0x87, 0xed, 0x69, 0x99, 0x62, 0x06, 0xdd, 0x83, 0xbb, 0x63, 0xd1, 0x58,
	0x7d, 0xa1, 0xca, 0x46, 0x0c, 0x9e, 0x45, 0xbb, 0x70, 0x6f, 0x2c, 0xdc, 0x50, 0xf1, 0xa1, 0xa6,
	0xb3, 0x82, 0xee, 0x9b, 0xb8, 0xae, 0xeb, 0x9a, 0xfe, 0x5c, 0x9c, 0x29, 0xfe, 0x46, 0x80, 0xd5,
	0x91, 0x97, 0x0e, 0xba, 0x01, 0xd7, 0xaa, 0x12, 0x56, 0x75, 0xc3, 0x94, 0xcb, 0x95, 0xa4, 0x02,
	0x8c, 0x01, 0x48, 0x7b, 0x92, 0xae, 0x54, 0x74, 0x51, 0x40, 0xb7, 0xa1, 0x90, 0x04, 0xe0, 0xbd,
	0xc0, 0x5b, 0x43, 0xcc, 0xa0, 0x9b, 0x70, 0x3d, 0x09, 0xd7, 0xcb, 0x56, 0xcc, 0x16, 0xff, 0x9d,
	0x81, 0x4f, 0x27, 0x7d, 0x69, 0xd3, 0x0e, 0xec, 0x2d, 0x5b, 0x7d, 0xad, 0xca, 0x75, 0x83, 0xee,
	0x79, 0xa8, 0x47, 0x77, 0xbe, 0x5e, 0x8b, 0x65, 0x1e, 0x2f, 0xe9, 0x18, 0xb0, 0x5c, 0x39, 0xac,
	0x96, 0x55, 0x83, 0x75, 0x53, 0x11, 0x6e, 0xa7, 0xc1, 0xc3, 0x0d, 0x16, 0x33, 0x03, 0x7b, 0x3b,
	0x4e, 0x9a, 0xad, 0x9b, 0x8e, 0x02, 0x2a, 0x41, 0x31, 0x0d, 0xdd, 0xab, 0x82, 0x22, 0xce, 0xa0,
	0x2f, 0xe1, 0x8b, 0xf4, 0xc4, 0x75, 0x43, 0xd3, 0xeb, 0xaa, 0x62, 0x4a, 0x35, 0x53, 0x57, 0x8f,
	0xc4, 0xd9, 0x69, 0x96, 0x6b, 0x68, 0x87, 0xb4, 0x3f, 0xeb, 0x86, 0x38, 0x57, 0xfc, 0xa3, 0x00,
	0x9f, 0xc8, 0xae, 0x13, 0xd8, 0x4e, 0x97, 0x48, 0xbe, 0x4e, 0xde, 0x69, 0xe1, 0x79, 0xc6, 0xf5,
	0xd0, 0x2d, 0xb8, 0x19, 0xe9, 0x73, 0x79, 0x53, 0xd3, 0x35, 0x43, 0x93, 0x8c, 0x0a, 0x8e, 0xd5,
	0x77, 0x22, 0x8c, 0x0e, 0xa4, 0xa2, 0xe2, 0xb0, 0xae, 0xe3, 0x61, 0x58, 0x35, 0xf0, 0x31, 0x6f,
	0x85, 0xd0, 0x61, 0xc6, 0x63, 0x65, 0x4c, 0xe7, 0x9b, 0xcf, 0xbf, 0x98, 0x2d, 0xfe, 0x56, 0x80,
	0x1c, 0xff, 0x16, 0x65, 0x9f, 0x2a, 0x79, 0xb8, 0x4c, 0x17, 0x58, 0xa9, 0x1b, 0xa6, 0x71, 0x5c,
	0x55, 0x07, 0x7b, 0x78, 0xe0, 0x0e, 0xb3, 0x07, 0xd3, 0xa8, 0x84, 0xd5, 0x09, 0x9d, 0x64, 0x10,
	0xc0, 0x9f, 0x42, 0x31, 0x0c, 0x2c, 0x66, 0x26, 0x62, 0x42, 0x9d, 0x2c, 0xba, 0x0a, 0x9f, 0x0c,
	0x60, 0x0e, 0x54, 0x09, 0x1b, 0x7b, 0xaa, 0x64, 0x88, 0x33, 0xc5, 0x5f, 0x09, 0x70, 0x25, 0x72,
	0x42, 0x83, 0xbe, 0x58, 0xed, 0x36, 0x69, 0x56, 0xba, 0x81, 0x6c, 0x75, 0x7d, 0x82, 0xee, 0xc2,
	0xad, 0x9e, 0x87, 0x19, 0x52, 0xed, 0x65, 0x7f, 0xaf, 0x4c, 0x59, 0xa2, 0xc3, 0xdd, 0x5f, 0x4d,
	0x2a, 0x94, 0xa7, 0x20, 0x0a, 0xe8, 0x0e, 0x7c, 0x36, 0x19, 0x8a, 0xd5, 0x9a, 0x6a, 0x88, 0x99,
	0xe2, 0x3f, 0x72, 0xb0, 0x11, 0x4f, 0x8e, 0x1e, 0xe8, 0x49, 0x33, 0x4c, 0xed, 0x36, 0x14, 0x06,
	0x45, 0xb8, 0xcf, 0x0d, 0xe7, 0xb5, 0x0b, 0xf7, 0x26, 0xe0, 0xea, 0xfa, 0x81, 0xa4, 0x2b, 0xf4,
	0x3a, 0x02, 0x89, 0x02, 0x7a, 0x06, 0x4f, 0x26, 0x50, 0xf6, 0x24, 0xa5, 0x5f, 0xe5, 0xde, 0x1b,
	0x47, 0x32, 0x0c, 0xac, 0xed, 0xd5, 0x0d, 0xb5, 0x26, 0x66, 0x90, 0x0a, 0x52, 0x8a, 0xc0, 0xa0,
	0x0f, 0x25, 0xca, 0x64, 0xd1, 0x63, 0x78, 0x98, 0x96, 0x47, 0xd8, 0x32, 0xda, 0xa1, 0x8a, 0xe3,
	0xd4, 0x19, 0xf4, 0x35, 0x7c, 0x95, 0x42, 0xe5, 0x4f, 0x1e, 0xe1, 0xce, 0xa2, 0x27, 0xf0, 0x28,
	0x35, 0x7b, 0xb9, 0x82, 0x15, 0xf3, 0x50, 0xc2, 0x2f, 0x07, 0xc9, 0x73, 0x48, 0x03, 0x35, 0xed,
	0xc1, 0xdc, 0xdd, 0xcc, 0x04, 0x5f, 0x88, 0x49, 0x5d, 0x9a, 0xa2, 0x8a, 0x34, 0x90, 0x22, 0x33,
	0x8f, 0x9e, 0x83, 0x3c, 0x5d, 0x29, 0x26, 0x0b, 0x2d, 0xa0, 0xd7, 0x60, 0x7c, 0xdc, 0xae, 0xaa,
	0xaf, 0x0d, 0x15, 0xeb, 0x52, 0x9a, 0x32, 0xa0, 0xa7, 0xf0, 0x38, 0xb5, 0x68, 0x83, 0xfe, 0x13,
	0xa3, 0xe7, 0xd0, 0x23, 0x78, 0x30, 0x81, 0x1e, 0xef, 0x91, 0xfe, 0xa9, 0x40, 0x53, 0xc4, 0x45,
	0xf4, 0x10, 0x76, 0x27, 0x10, 0xd9, 0x14, 0x9a, 0x35, 0x43, 0x93, 0x5f, 0x1e, 0x87, 0xb7, 0xcb,
	0x5a, 0xcd, 0x10, 0x97, 0xd0, 0x8f, 0xe0, 0x07, 0x13, 0x68, 0xbd, 0xc5, 0xd2, 0x3f, 0x54, 0x1c,
	0x1b, 0x31, 0x0a, 0xab, 0x63, 0x55, 0x5c, 0x9e, 0x62, 0x4f, 0x6a, 0xda, 0xf3, 0xf4, 0xca, 0xad,
	0x20, 0x19, 0x9e, 0x4d, 0x35, 0x22, 0xf2, 0x81, 0x56, 0x56, 0x92, 0x45, 0x44, 0xf4, 0x00, 0x76,
	0x26, 0x88, 0xec, 0x57, 0xb0, 0xac, 0xf2, 0x37, 0x56, 0xcf, 0x24, 0x56, 0xd1, 0x57, 0x70, 0x7f,
	0x12, 0x49, 0xd2, 0xca, 0x95, 0x57, 0x2a, 0x1e, 0xe6, 0x21, 0xfa, 0x1a, 0x9d, 0x6e, 0xe9, 0x9a,
	0x5e, 0xad, 0x1b, 0x66, 0x4d, 0xfb, 0x46, 0x15, 0xd7, 0xe8, 0x6b, 0x34, 0x75, 0xa7, 0xa2, 0x5a,
	0x89, 0x97, 0x47, 0xcd, 0x78, 0xe4, 0x21, 0x7b, 0x9a, 0x2e, 0xe1, 0x63, 0x71, 0x3d, 0xa5, 0xf7,
	0x46, 0x8d, 0x6e, 0xa0, 0x85, 0x3e, 0x99, 0x66, 0x39, 0xaa, 0x84, 0xe5, 0x83, 0x78, 0xc5, 0x37,
	0xe8, 0x5b, 0xe7, 0x26, 0xfb, 0xc7, 0xca, 0xc8, 0xb9, 0x2a, 0x6e, 0xf1, 0xbb, 0x70, 0x2f, 0xdc,
	0xb7, 0x84, 0x2e, 0x18, 0xe3, 0xf6, 0x7b, 0xf0, 0xc3, 0xe9, 0x28, 0xbd, 0xfb, 0x52, 0x19, 0xab,
	0x92, 0x72, 0xdc, 0x3b, 0x92, 0x0a, 0xc5, 0x3f, 0x0b, 0x50, 0x94, 0x2d, 0xa7, 0x41, 0x5a, 0xd1,
	0xff, 0x5d, 0x27, 0x66, 0xf9, 0x04, 0x1e, 0x4d, 0x31, 0xef, 0x63, 0xf2, 0x3d, 0x82, 0xda, 0xc7,
	0x92, 0xeb, 0xfa, 0x4b, 0xbd, 0x72, 0xa4, 0x4f, 0x22, 0xf0, 0x45, 0xd4, 0xec, 0x33, 0xf6, 0x4f,
	0xe3, 0xe9, 0x16, 0xc1, 0xdb, 0xee, 0xbf, 0x5b, 0xc4, 0xc7, 0x92, 0xa7, 0x5a, 0xc4, 0xde, 0xc9,
	0x5f, 0x3f, 0x6c, 0x0a, 0x7f, 0xff, 0xb0, 0x29, 0xfc, 0xeb, 0xc3, 0xa6, 0x00, 0x1b, 0x0d, 0xb7,
	0x9d, 0xf4, 0x45, 0xbf, 0x37, 0x2f, 0x75, 0xec, 0x2a, 0xfd, 0x9a, 0xad, 0x0a, 0xdf, 0xec, 0x9c,
	0xd9, 0xc1, 0x79, 0xf7, 0xa4, 0xd4, 0x70, 0xdb, 0x3b, 0x03, 0xbf, 0x45, 0x96, 0xce, 0x88, 0x13,
	0xfe, 0xb2, 0xc9, 0x7f, 0x96, 0x7c, 0x62, 0x75, 0xec, 0xb7, 0xbb, 0x27, 0x73, 0x2c, 0xf6, 0xe0,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xa4, 0xf1, 0x62, 0x56, 0x1d, 0x00, 0x00,
}

func (m *WorkflowExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsCron {
		i--
		if m.IsCron {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.TaskList) > 0 {
		i -= len(m.TaskList)
		copy(dAtA[i:], m.TaskList)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.TaskList)))
		i--
		dAtA[i] = 0x62
	}
	if m.AutoResetPoints != nil {
		{
			size, err := m.AutoResetPoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SearchAttributes != nil {
		{
			size, err := m.SearchAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Memo != nil {
		{
			size, err := m.Memo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ExecutionTime != nil {
		{
			size, err := m.ExecutionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ParentExecutionInfo != nil {
		{
			size, err := m.ParentExecutionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.HistoryLength != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.HistoryLength))
		i--
		dAtA[i] = 0x30
	}
	if m.CloseStatus != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.CloseStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.CloseTime != nil {
		{
			size, err := m.CloseTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TaskStartToCloseTimeout != nil {
		{
			size, err := m.TaskStartToCloseTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExecutionStartToCloseTimeout != nil {
		{
			size, err := m.ExecutionStartToCloseTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TaskList != nil {
		{
			size, err := m.TaskList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParentExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParentExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParentExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InitiatedId != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainId) > 0 {
		i -= len(m.DomainId)
		copy(dAtA[i:], m.DomainId)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.DomainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InitiatedId != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x10
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingActivityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingActivityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingActivityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LastWorkerIdentity) > 0 {
		i -= len(m.LastWorkerIdentity)
		copy(dAtA[i:], m.LastWorkerIdentity)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.LastWorkerIdentity)))
		i--
		dAtA[i] = 0x62
	}
	if m.LastFailure != nil {
		{
			size, err := m.LastFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ExpirationTime != nil {
		{
			size, err := m.ExpirationTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ScheduledTime != nil {
		{
			size, err := m.ScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.MaximumAttempts != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.MaximumAttempts))
		i--
		dAtA[i] = 0x40
	}
	if m.Attempt != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x38
	}
	if m.LastStartedTime != nil {
		{
			size, err := m.LastStartedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastHeartbeatTime != nil {
		{
			size, err := m.LastHeartbeatTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.HeartbeatDetails != nil {
		{
			size, err := m.HeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingChildExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingChildExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingChildExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ParentClosePolicy != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x20
	}
	if m.InitiatedId != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WorkflowTypeName) > 0 {
		i -= len(m.WorkflowTypeName)
		copy(dAtA[i:], m.WorkflowTypeName)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.WorkflowTypeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingDecisionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingDecisionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingDecisionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OriginalScheduledTime != nil {
		{
			size, err := m.OriginalScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Attempt != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x20
	}
	if m.StartedTime != nil {
		{
			size, err := m.StartedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ScheduledTime != nil {
		{
			size, err := m.ScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityLocalDispatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityLocalDispatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityLocalDispatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ScheduledTimeOfThisAttempt != nil {
		{
			size, err := m.ScheduledTimeOfThisAttempt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartedTime != nil {
		{
			size, err := m.StartedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ScheduledTime != nil {
		{
			size, err := m.ScheduledTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetPoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetPoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetPoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Points[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkflow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResetPointInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetPointInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetPointInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resettable {
		i--
		if m.Resettable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ExpiringTime != nil {
		{
			size, err := m.ExpiringTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkflow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FirstDecisionCompletedId != 0 {
		i = encodeVarintWorkflow(dAtA, i, uint64(m.FirstDecisionCompletedId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BinaryChecksum) > 0 {
		i -= len(m.BinaryChecksum)
		copy(dAtA[i:], m.BinaryChecksum)
		i = encodeVarintWorkflow(dAtA, i, uint64(len(m.BinaryChecksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflow(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.CloseTime != nil {
		l = m.CloseTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.CloseStatus != 0 {
		n += 1 + sovWorkflow(uint64(m.CloseStatus))
	}
	if m.HistoryLength != 0 {
		n += 1 + sovWorkflow(uint64(m.HistoryLength))
	}
	if m.ParentExecutionInfo != nil {
		l = m.ParentExecutionInfo.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.ExecutionTime != nil {
		l = m.ExecutionTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.Memo != nil {
		l = m.Memo.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.SearchAttributes != nil {
		l = m.SearchAttributes.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.AutoResetPoints != nil {
		l = m.AutoResetPoints.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.TaskList)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.IsCron {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkflowExecutionConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskList != nil {
		l = m.TaskList.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.ExecutionStartToCloseTimeout != nil {
		l = m.ExecutionStartToCloseTimeout.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.TaskStartToCloseTimeout != nil {
		l = m.TaskStartToCloseTimeout.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParentExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainId)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovWorkflow(uint64(m.InitiatedId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExternalExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovWorkflow(uint64(m.InitiatedId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PendingActivityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovWorkflow(uint64(m.State))
	}
	if m.HeartbeatDetails != nil {
		l = m.HeartbeatDetails.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.LastHeartbeatTime != nil {
		l = m.LastHeartbeatTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.LastStartedTime != nil {
		l = m.LastStartedTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovWorkflow(uint64(m.Attempt))
	}
	if m.MaximumAttempts != 0 {
		n += 1 + sovWorkflow(uint64(m.MaximumAttempts))
	}
	if m.ScheduledTime != nil {
		l = m.ScheduledTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.ExpirationTime != nil {
		l = m.ExpirationTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.LastFailure != nil {
		l = m.LastFailure.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.LastWorkerIdentity)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PendingChildExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.WorkflowTypeName)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovWorkflow(uint64(m.InitiatedId))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovWorkflow(uint64(m.ParentClosePolicy))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PendingDecisionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovWorkflow(uint64(m.State))
	}
	if m.ScheduledTime != nil {
		l = m.ScheduledTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.StartedTime != nil {
		l = m.StartedTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovWorkflow(uint64(m.Attempt))
	}
	if m.OriginalScheduledTime != nil {
		l = m.OriginalScheduledTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivityLocalDispatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.ScheduledTime != nil {
		l = m.ScheduledTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.StartedTime != nil {
		l = m.StartedTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.ScheduledTimeOfThisAttempt != nil {
		l = m.ScheduledTimeOfThisAttempt.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResetPoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovWorkflow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResetPointInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BinaryChecksum)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.FirstDecisionCompletedId != 0 {
		n += 1 + sovWorkflow(uint64(m.FirstDecisionCompletedId))
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.ExpiringTime != nil {
		l = m.ExpiringTime.Size()
		n += 1 + l + sovWorkflow(uint64(l))
	}
	if m.Resettable {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkflow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflow(x uint64) (n int) {
	return sovWorkflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkflowExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &WorkflowType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloseTime == nil {
				m.CloseTime = &types.Timestamp{}
			}
			if err := m.CloseTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseStatus", wireType)
			}
			m.CloseStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloseStatus |= WorkflowExecutionCloseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryLength", wireType)
			}
			m.HistoryLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentExecutionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentExecutionInfo == nil {
				m.ParentExecutionInfo = &ParentExecutionInfo{}
			}
			if err := m.ParentExecutionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionTime == nil {
				m.ExecutionTime = &types.Timestamp{}
			}
			if err := m.ExecutionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = &Memo{}
			}
			if err := m.Memo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = &SearchAttributes{}
			}
			if err := m.SearchAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoResetPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoResetPoints == nil {
				m.AutoResetPoints = &ResetPoints{}
			}
			if err := m.AutoResetPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCron", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCron = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskList == nil {
				m.TaskList = &TaskList{}
			}
			if err := m.TaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionStartToCloseTimeout == nil {
				m.ExecutionStartToCloseTimeout = &types.Duration{}
			}
			if err := m.ExecutionStartToCloseTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskStartToCloseTimeout == nil {
				m.TaskStartToCloseTimeout = &types.Duration{}
			}
			if err := m.TaskStartToCloseTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParentExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParentExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParentExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingActivityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingActivityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingActivityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PendingActivityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatDetails == nil {
				m.HeartbeatDetails = &Payload{}
			}
			if err := m.HeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatTime == nil {
				m.LastHeartbeatTime = &types.Timestamp{}
			}
			if err := m.LastHeartbeatTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStartedTime == nil {
				m.LastStartedTime = &types.Timestamp{}
			}
			if err := m.LastStartedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumAttempts", wireType)
			}
			m.MaximumAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumAttempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = &types.Timestamp{}
			}
			if err := m.ScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTime == nil {
				m.ExpirationTime = &types.Timestamp{}
			}
			if err := m.ExpirationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailure == nil {
				m.LastFailure = &Failure{}
			}
			if err := m.LastFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWorkerIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastWorkerIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingChildExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingChildExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingChildExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingDecisionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingDecisionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingDecisionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PendingDecisionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = &types.Timestamp{}
			}
			if err := m.ScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = &types.Timestamp{}
			}
			if err := m.StartedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginalScheduledTime == nil {
				m.OriginalScheduledTime = &types.Timestamp{}
			}
			if err := m.OriginalScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityLocalDispatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityLocalDispatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityLocalDispatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = &types.Timestamp{}
			}
			if err := m.ScheduledTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = &types.Timestamp{}
			}
			if err := m.StartedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimeOfThisAttempt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTimeOfThisAttempt == nil {
				m.ScheduledTimeOfThisAttempt = &types.Timestamp{}
			}
			if err := m.ScheduledTimeOfThisAttempt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetPoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetPoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetPoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &ResetPointInfo{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetPointInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetPointInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetPointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDecisionCompletedId", wireType)
			}
			m.FirstDecisionCompletedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstDecisionCompletedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiringTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiringTime == nil {
				m.ExpiringTime = &types.Timestamp{}
			}
			if err := m.ExpiringTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resettable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resettable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflow = fmt.Errorf("proto: unexpected end of group")
)
