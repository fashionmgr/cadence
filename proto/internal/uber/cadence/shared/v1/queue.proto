// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package uber.cadence.shared.v1;

option go_package = "github.com/uber/cadence/.gen/proto/shared/v1;sharedv1";

import "google/protobuf/timestamp.proto";
import "uber/cadence/api/v1/common.proto";
import "uber/cadence/api/v1/history.proto";
import "uber/cadence/api/v1/workflow.proto";

enum TaskType {
  TASK_TYPE_INVALID = 0;
  TASK_TYPE_TRANSFER = 1;
  TASK_TYPE_TIMER = 2;
  TASK_TYPE_REPLICATION = 3;
  TASK_TYPE_CROSS_CLUSTER = 4;
}

enum CrossClusterTaskType {
  CROSS_CLUSTER_TASK_TYPE_INVALID = 0;
  CROSS_CLUSTER_TASK_TYPE_START_CHILD_EXECUTION = 1;
  CROSS_CLUSTER_TASK_TYPE_CANCEL_EXECUTION = 2;
  CROSS_CLUSTER_TASK_TYPE_SIGNAL_EXECUTION = 3;
  CROSS_CLUSTER_TASK_TYPE_RECORD_CHILD_WORKKLOW_EXECUTION_COMPLETE = 4;
  CROSS_CLUSTER_TASK_TYPE_APPLY_PARENT_CLOSE_POLICY = 5;
}

enum CrossClusterTaskFailedCause {
  CROSS_CLUSTER_TASK_FAILED_CAUSE_INVALID = 0;
  CROSS_CLUSTER_TASK_FAILED_CAUSE_DOMAIN_NOT_ACTIVE = 1;
  CROSS_CLUSTER_TASK_FAILED_CAUSE_DOMAIN_NOT_EXISTS = 2;
  CROSS_CLUSTER_TASK_FAILED_CAUSE_WORKFLOW_ALREADY_RUNNING = 3;
  CROSS_CLUSTER_TASK_FAILED_CAUSE_WORKFLOW_NOT_EXISTS = 4;
  CROSS_CLUSTER_TASK_FAILED_CAUSE_WORKFLOW_ALREADY_COMPLETED = 5;
  CROSS_CLUSTER_TASK_FAILED_CAUSE_UNCATEGORIZED = 6;
}

enum GetTaskFailedCause {
  GET_TASK_FAILED_CAUSE_INVALID = 0;
  GET_TASK_FAILED_CAUSE_SERVICE_BUSY = 1;
  GET_TASK_FAILED_CAUSE_TIMEOUT = 2;
  GET_TASK_FAILED_CAUSE_SHARD_OWNERSHIP_LOST = 3;
  GET_TASK_FAILED_CAUSE_UNCATEGORIZED = 4;
}

message CrossClusterTaskInfo {
  string domain_id = 1;
  api.v1.WorkflowExecution workflow_execution = 2;
  CrossClusterTaskType task_type = 3;
  int32 task_state = 4;
  int64 task_id = 5;
  google.protobuf.Timestamp visibilityTimestamp = 6;
}

message CrossClusterStartChildExecutionRequestAttributes {
  string target_domain_id = 1;
  string request_id = 2;
  int64 initiated_event_id = 3;
  api.v1.StartChildWorkflowExecutionInitiatedEventAttributes initiated_event_attributes = 4;
  // targetRunID is for scheduling first decision task
  // targetWorkflowID is available in initiatedEventAttributes
  string target_run_id = 5;
}

message CrossClusterStartChildExecutionResponseAttributes {
  string run_id = 1;
}

message CrossClusterCancelExecutionRequestAttributes {
  string target_domain_id = 1;
  api.v1.WorkflowExecution target_workflow_execution = 2;
  string request_id = 3;
  int64 initiated_event_id = 4;
  bool child_workflow_only = 5;
}

message CrossClusterCancelExecutionResponseAttributes {
}

message CrossClusterSignalExecutionRequestAttributes {
  string target_domain_id = 1;
  api.v1.WorkflowExecution target_workflow_execution = 2;
  string request_id = 3;
  int64 initiated_event_id = 4;
  bool child_workflow_only = 5;
  string signal_name = 6;
  api.v1.Payload signal_input = 7;
  bytes control = 8;
}

message CrossClusterSignalExecutionResponseAttributes {
}

message CrossClusterRecordChildWorkflowExecutionCompleteRequestAttributes {
  string target_domain_id = 1;
  api.v1.WorkflowExecution target_workflow_execution = 2;
  int64 initiated_event_id = 3;
  api.v1.HistoryEvent completion_event = 4;
}

message CrossClusterRecordChildWorkflowExecutionCompleteResponseAttributes {
}

message ApplyParentClosePolicyAttributes {
  string child_domain_id = 1;
  string child_workflow_id = 2;
  string child_run_id = 3;
  api.v1.ParentClosePolicy parent_close_policy = 4;
}

message ApplyParentClosePolicyStatus {
  bool completed = 1;
  CrossClusterTaskFailedCause failed_cause = 2;
}

message ApplyParentClosePolicyRequest {
  ApplyParentClosePolicyAttributes child = 1;
  ApplyParentClosePolicyStatus status =2;
}

message CrossClusterApplyParentClosePolicyRequestAttributes {
  repeated ApplyParentClosePolicyRequest children = 1;
}

message ApplyParentClosePolicyResult {
  ApplyParentClosePolicyAttributes child = 1;
  CrossClusterTaskFailedCause failed_cause = 2;
}

message CrossClusterApplyParentClosePolicyResponseAttributes {
  repeated ApplyParentClosePolicyResult children_status = 1;
}

message CrossClusterTaskRequest {
  CrossClusterTaskInfo task_info = 1;
  oneof attributes {
    CrossClusterStartChildExecutionRequestAttributes startChildExecutionAttributes = 2;
    CrossClusterCancelExecutionRequestAttributes cancelExecutionAttributes = 3;
    CrossClusterSignalExecutionRequestAttributes signalExecutionAttributes = 4;
    CrossClusterRecordChildWorkflowExecutionCompleteRequestAttributes recordChildWorkflowExecutionCompleteRequestAttributes = 5;
    CrossClusterApplyParentClosePolicyRequestAttributes applyParentClosePolicyRequestAttributes = 6;
  }
}

message CrossClusterTaskResponse {
  int64 task_id = 1;
  CrossClusterTaskType task_type = 2;
  int32 task_state = 3;
  CrossClusterTaskFailedCause failed_cause = 4;
  oneof attributes {
    CrossClusterStartChildExecutionResponseAttributes startChildExecutionAttributes = 5;
    CrossClusterCancelExecutionResponseAttributes cancelExecutionAttributes = 6;
    CrossClusterSignalExecutionResponseAttributes signalExecutionAttributes = 7;
    CrossClusterRecordChildWorkflowExecutionCompleteResponseAttributes recordChildWorkflowExecutionCompleteRequestAttributes = 8;
    CrossClusterApplyParentClosePolicyResponseAttributes applyParentClosePolicyResponseAttributes = 9;
  }
}

message CrossClusterTaskRequests {
  repeated CrossClusterTaskRequest task_requests = 1;
}